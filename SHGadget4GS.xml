<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="SHGadget for Google Sites" author="elekingmole">
		<Require feature="setprefs" />
		<Require feature="dynamic-height" />
		<Require feature="opensocial-0.9" />
	</ModulePrefs>

	<UserPref name="baseurljs" datatype="string" default_value="http://alexgorbatchev.com/pub/sh/current/scripts" />
	<UserPref name="baseurlcss" datatype="string" default_value="http://alexgorbatchev.com/pub/sh/current/styles" />
	<UserPref name="preprocessjsURL" datatype="string" />
	<UserPref name="language" datatype="string" />
	<UserPref name="languagelower" datatype="string" />
	<UserPref name="theme" datatype="string" />
	<UserPref name="content" datatype="string" />
	<UserPref name="baseline" datatype="string" default_value="0" />
	<UserPref name="targetline" datatype="string" />
	<UserPref name="comment" datatype="string" />
	<UserPref name="firstline" datatype="string" />
	<UserPref name="highlight" datatype="string" />
	<UserPref name="tabsize" datatype="string" />
	<UserPref name="shtitle" datatype="string" />
	<UserPref name="shOption" datatype="string" />
	<UserPref name="splitword" datatype="string" default_value="----[split]----" />
	<UserPref name="replacespecifier" datatype="string" default_value="%--%" />
	<UserPref name="replacewords" datatype="string" />
	<UserPref name="blnSetting" datatype="string" />
	<UserPref name="blnSettingValues" datatype="string" default_value="multilanguage///M,remotedata///D,remotereplacedata///R,remotecomment///C,urlshow///U,dynamicheight///H,gutter///G,collapse///P,simplereplace///S"/>

<Content type="html"><![CDATA[

<link type="text/css" href="__UP_baseurlcss__/shCore.css" rel="stylesheet"/>
<link type="text/css" href="__UP_baseurlcss__/shTheme__UP_theme__.css" rel="stylesheet"/>
<script src="__UP_baseurljs__/shCore.js" type="text/javascript"></script>
<script src="__UP_baseurljs__/shAutoloader.js" type="text/javascript"></script>
<script src="__UP_baseurljs__/shBrushXml.js" type="text/javascript"></script>
<script src="__UP_preprocessjsURL__" type="text/javascript"></script>

<script type="text/javascript">
	var prefs=new gadgets.Prefs();
	var preprocessjsURL = "__UP_preprocessjsURL__";
	var splitString = "__UP_splitword__";
	var contentData="__UP_content__";
	var replaceData="__UP_replacewords__";
	var commentData="__UP_comment__";
	var blnSetting = "__UP_blnSetting__"

	var returnHtml="";

	var targetlineArray = new Array();
	var strArray = new Array();
	var commentArray = new Array();

	var blnSettingValues;

	var lang= getLang();

	function doHighlight(){
		blnSettingValues = prefs.getString("blnSettingValues").replace(/&#34;/g,'');

		if(getBlnEx("D") && getBlnEx("U")){
			returnHtml +="<a href='__UP_content__' target='_blank'>__UP_content__</a>"+"\n\n";
		}
		returnHtml +="<pre id='code_pre'  class='brush:__UP_languagelower__;__UP_shOption__' title='__UP_shtitle__' >";
		setupData();
	}

	function setupData(){
		doSetup("D",contentData,getContentData,setupReplaceData)
	}

	function getContentData(obj){
		contentData = getTargetLangData(obj.text);
		setupReplaceData();
	}

	function setupReplaceData(){
		doSetup("R",replaceData,getReplaceData,setupCommentData);
	}

	function getReplaceData(obj){
		replaceData = getTargetLangData(obj.text);
		setupCommentData();
	}

	function setupCommentData(){
		doSetup("C",commentData,getCommentData,doProcessData);
	}

	function getCommentData(obj){
		commentData = getTargetLangData(obj.text);
		doProcessData();
	}

	function doProcessData(){
		returnHtml += changeData();
		closeHTML();
	}

	function changeData(){
		if(to(contentData)){
			if(to(preprocessjsURL)){
				contentData = doModify(contentData);
			}

			if(to(replaceData)){
				contentData = doReplaceWords();
			}

			strArray = getStrArray();
			targetlineArray = getTargetLineArray();

			if(to(commentData)){
				commentArray = getCommentArray();
			}

			return processTargetlineData(targetlineArray,strArray,commentArray);
		}
	}

	function doSetup(mode,data,asyncMethod,nextMethod){
		data=getTargetLangData(data);
		doFork(mode,data,asyncMethod,nextMethod);
	}

	function getTargetLangData(sourceData){
		if(to(sourceData)){
			if(getBlnEx("M") && sourceData.indexOf(splitString) != -1){
				sourceData = getTargetData(sourceData);
			}
		}

		return sourceData;
	}

	function getTargetData(targetData){
		var tempContent = targetData.split(splitString);
		var returnContent = tempContent[0].substring(3,tempContent[0].length);
		var diff = 0;

		for(i=0;i<tempContent.length;i++){
			for(var diff=0;diff<3;diff++){
				if(tempContent[i].substring(0+diff,2+diff) == lang ){
					returnContent = tempContent[i].substring(2+diff,tempContent[i].length);
					break;
				}
			}
		}
		return returnContent;
	}

	function doReplaceWords(){
		var specifier =  "__UP_replacespecifier__";
		var tempWords = "";
		var replaceWords = "";
		var tempTargetWord;
		var tempReplaceWord;
		var prefix=specifier.substring(0,specifier.length/2);
		var suffix=specifier.substring(specifier.length/2,specifier.length);
		var regexp;


		if(replaceData.indexOf(specifier+specifier) != -1){
			tempWords = replaceData.split(specifier+specifier);

			if(tempWords[1].length>0){
				if(tempWords[1].indexOf(specifier) != -1){
					replaceWords = tempWords[1].split(specifier);
				}else{
					replaceWords = tempWords[1];
				}

				for(i=0;i<replaceWords.length;i++){

					if(replaceWords[i].indexOf("=") != -1){
						tempTargetWord=replaceWords[i].split("=");

						tempReplaceWord=replaceWords[i].substring(replaceWords[i].indexOf("=")+1,replaceWords[i].length);

						if(getBlnEx("S")){
							regexp= new RegExp(tempTargetWord[0],"g");
						}else{
							regexp= new RegExp(prefix+tempTargetWord[0]+suffix,"g");
						}

						contentData=contentData.replace(regexp,tempReplaceWord);
					}
				}
			}
		}

		return contentData;
	}

	function getCommentArray(){
		var commentArray = new Array();
		var tempArray = new Array();
		var tempContent;
		var diff=0;

		if(commentData.indexOf("-") != -1){
			if(commentData.indexOf(",") != -1){
				tempArray = commentData.split(",");
			}else{
				tempArray.push(commentData);
			}

			for(c=0;c<tempArray.length;c++){
				if(tempArray[c].length > 0 ){
					commentArray.push(parseComment(tempArray[c]));
				}
			}
		}
		return commentArray;
	}

	function parseComment(parseTargetComment){
		var tempArray;
		var tempCommentArray = new Array();

		if(parseTargetComment.indexOf("-") == -1){
			tempCommentArray.push(new Array(parseTargetComment.substring(1),parseTargetComment.substring(0,1)));
		}else{
			tempArray = parseTargetComment.split("-");

			tempCommentArray.push(new Array(tempArray[0].substring(1),tempArray[0].substring(0,1) + tempArray[1]));
		}
		return tempCommentArray;
	}

	function getStrArray(){
		var str = gadgets.util.escapeString(contentData);

		if(str.indexOf("&#13;&#10;") != -1){
			strArray = str.split("&#13;&#10;");
		}else{
			strArray = str.split("&#10;");
		}

		return strArray;
	}

	function getTargetLineArray(){
		var targetlineString = "__UP_targetline__";

		if(to(targetlineString)){
			targetlineArray = getTargetline(targetlineString,strArray);
		}else{
			targetlineArray = getTargetline("0-",strArray);
		}
		return targetlineArray;
	}

	function doFork(targetBlnWord,targeData,async,defaultMethod){
		if(getBlnEx(targetBlnWord)){
			if(targeData.substring(0,4)=="http"){
				getRemoteData(targeData.substring(0,targeData.length),async);
				return;
			}else if(targeData.substring(1,4)=="htt"){
				getRemoteData(targeData.substring(1,targeData.length),async);
				return;
			}
			defaultMethod();
			return;
		}else{
			defaultMethod();
			return;
		}
	}

	function getRemoteData(contentURL,handler) {
		var params = {};
		params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
		var url= contentURL;
		gadgets.io.makeRequest(url, handler, params);
	}

	function closeHTML(){
		returnHtml+="</pre>";
		document.getElementById('content_div').innerHTML += returnHtml;
		SyntaxHighlighter.autoloader('__UP_languagelower__                   __UP_baseurljs__/shBrush__UP_language__.js');
		SyntaxHighlighter.all();

		if(getBlnEx("H")){
			gadgets.window.adjustHeight();
		}
	}

	function htmlUnescape(str){
		str=str.replace(/&gt;/g,'>');
		str=str.replace(/&lt;/g,'<');
		str=str.replace(/&#62;/g,'>');
		str=str.replace(/&#60;/g,'<');
		str=str.replace(/&#34;/g,'"');
		str=str.replace(/&quot;/g,'"');
		str=str.replace(/&#39;/g,"'");

		return str;
	}

	function getTargetline(tempTargetlineString,tempStrArray){
		var tempTargetlineArray = new Array();
		var returnTargetlineArray = new Array();
		var lineMax = tempStrArray.length;

		if((tempTargetlineString.indexOf(",") != -1 )){
			tempTargetlineArray = tempTargetlineString.split(",");
		}else{
			if(tempTargetlineString.indexOf("F") != -1){
				var index;

				if(tempTargetlineString.length == 1){
					index= 0;
				}else{
					index = parseInt(tempTargetlineString.substring(1,tempTargetlineString.length));
				}

				if(tempStrArray[index].indexOf("L-I-N-E")!=-1){
					var targetlinefromSource = tempStrArray[index].split("L-I-N-E");
					if(targetlinefromSource[1].length>0){
						tempTargetlineArray = targetlinefromSource[1].split(",");
					}
				}else{
					window.alert("Line not designated ");
				}
			}else{
				tempTargetlineArray.push(tempTargetlineString);
			}
		}

		var tempUnfoldedArray;
		for(t= 0;t<= tempTargetlineArray.length;t++){
			tempUnfoldedArray = new Array();
			if(to(tempTargetlineArray[t])){

				if(tempTargetlineArray[t].indexOf("-") != -1 ){
					var tempNumber = tempTargetlineArray[t].split("-");

					if(tempNumber[0].length>0 && tempNumber[1].length>0){
						if(matchNumber(tempNumber[0]) && matchNumber(tempNumber[1])){
							tempUnfoldedArray=unfoldTargetline(parseInt(tempNumber[0]),parseInt(tempNumber[1]));
						}
					}else if(tempNumber[0].length>0){
						if(matchNumber(tempNumber[0])){
							tempUnfoldedArray=unfoldTargetline(parseInt(tempNumber[0]),lineMax);
						}
					}else if(tempNumber[1].length>0){
						if(matchNumber(tempNumber[1])){
							tempUnfoldedArray=unfoldTargetline(0,parseInt(tempNumber[1]));
						}
					}
				}else{
					tempUnfoldedArray.push(tempTargetlineArray[t]);
				}

				for(x= 0;x<= tempUnfoldedArray.length;x++){
					if(to(tempUnfoldedArray[x])){
						if(tempUnfoldedArray[x].indexOf(",") != -1){
							var tempSplitArray = tempUnfoldedArray[x].split(",");

							for(w= 0;w<= tempSplitArray.length;w++){
								if(to(tempSplitArray[w])){
									returnTargetlineArray.push(tempSplitArray[w]);
								}
							}
						}else{
							returnTargetlineArray.push(tempUnfoldedArray[x]);
						}
					}
				}
			}
		}
		return returnTargetlineArray;
	}

	function unfoldTargetline(startline,endline){
		var unfoldedTargetline ="";
		var comma=",";
		for (u= startline ;u<= endline;u++){
			unfoldedTargetline += u + comma;

			if(endline == u +1){
				comma ="";
			}
		}
		return unfoldedTargetline.split(",");
	}

	function to(object){
		if(!(typeof object === "undefined") && object.length>0){
			return true;
		}else{
			return false;
		}
	}

	function getBln(prefsname){
		if(prefs.getBool(prefsname) == true){
			return true;
		}else{
			return false;
		}
	}

	function getBlnEx(prefsnameword){
		if(blnSetting.indexOf(prefsnameword) != -1){
			return true;
		}else{
			return false;
		}
	}

	function matchNumber(targetString){
		if(targetString.match(/^[0-9]+/)){
			return true;
		}else{
			return false;
		}
	}

	function getLang(){
		return (navigator.userLanguage||navigator.browserLanguage||navigator.language).substr(0,2);
	}

	function processTargetlineData(targetlineArray,strArray,commentArray){
		var returnData="";
		var baseLine = __UP_baseline__;
		var index =0;
		var tempCommentArray = new Array();

		for (i=0;i<targetlineArray.length;i++){
			//alert("matchNumber(): "+matchNumber(targetlineArray[i])+" / targetlineArray[i]: "+targetlineArray[i]+" / i: " + i);
			if(matchNumber(targetlineArray[i])){
				alert("to(strArray[]): "+to(strArray[parseInt(targetlineArray[i]) + baseLine]) +" / i: " + i);
				if(to(strArray[parseInt(targetlineArray[i]) + baseLine])){
					if(commentArray.length>0 ){
						if(index < commentArray.length){
							tempCommentArray = commentArray[index][0];
//alert("tempCommentArray[0]: "+tempCommentArray[0]+" / " + tempCommentArray[1] +" / index: " + index +" / i: " + i);
							if(matchNumber(tempCommentArray[0]) && parseInt(tempCommentArray[0]) == i){
								//alert("tempCommentArray[1]: "+tempCommentArray[1]);
								if(tempCommentArray[1].substring(0,1) == "S"){
									returnData+= tempCommentArray[1].substring(1,tempCommentArray[1].length)+ "\r\n";
									returnData+=strArray[parseInt(targetlineArray[i]) +baseLine];

									if(index+1 < commentArray.length){
										tempCommentArray = commentArray[index+1][0];
										if(matchNumber(tempCommentArray[0]) && parseInt(tempCommentArray[0]) == i){
											if(tempCommentArray[1].substring(0,1) == "A"){
												returnData+=tempCommentArray[1].substring(1,tempCommentArray[1].length);
												index+=1;
											}else if(tempCommentArray[1].substring(0,1) == "N"){
												returnData+="\r\n";
												index+=1;
											}
										}
									}

									returnData+="\r\n";
								}else if(tempCommentArray[1].substring(0,1) == "A"){
									returnData+=strArray[parseInt(targetlineArray[i]) +baseLine] +
										tempCommentArray[1].substring(1,tempCommentArray[1].length) + "\r\n";
								}else if(tempCommentArray[1].substring(0,1) == "N"){
									returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+"\r\n\r\n";
								}else{
									returnData+= "\r\n";
								}

								index +=1;

							}else{
								returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+ "\r\n";
							}
						}else{
							returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+ "\r\n";
						}
					}else{
						returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+ "\r\n";
					}
				}

			}else if(targetlineArray[i].substring(0,1) =="S" && targetlineArray[i].length>1){
				returnData+= targetlineArray[i].substring(1,targetlineArray[i].length) + "\r\n";
			}else if(targetlineArray[i].substring(0,1) =="A" && targetlineArray[i].length>1){
				returnData= returnData.substring(0,returnData.length-1)+
					targetlineArray[i].substring(1,targetlineArray[i].length) + "\r\n";
			}else if(targetlineArray[i].substring(0,1) =="N"){
				returnData+= "\r\n";
			}
		}
		return returnData;
	}

	gadgets.util.registerOnLoadHandler(doHighlight);
</script>
<div id="content_div"></div>
]]>
	</Content>

	<Content type="html" view="configuration" preferred_height="400">
<![CDATA[
<script type="text/javascript">
	var prefs=new gadgets.Prefs();
	var blnSetting = "__UP_blnSetting__"
	var blnSettingValues = prefs.getString("blnSettingValues").replace(/&#34;/g,'');

	function init() {

		initStringValue(new Array('baseurljs','baseurlcss','content','targetline','baseline','comment',
		'firstline','highlight','tabsize','shtitle','language','theme','replacespecifier','replacewords','preprocessjsURL','splitword'));

		initBoolValueEx(blnSettingValues.split(","));

		update();
	}

	function initBoolValueEx(blns){
		var tempString;
		for (i=0;i<blns.length;i++){
			tempString = blns[i].split("///");

			if(blnSetting.indexOf(tempString[1]) != -1){
				document.getElementById(tempString[0]).checked=true;
			}else{
				document.getElementById(tempString[0]).checked=false;
			}
		}
	}

	function initStringValue(strs){
		for (i=0;i<strs.length;i++){
			var targetvalue=prefs.getString(strs[i]);
			if (targetvalue.length>0){
				document.getElementById(strs[i]).value=gadgets.util.unescapeString(targetvalue);
			}
		}
	}

	function updatePrefs(strs){
		for (i=0;i<strs.length;i++){
			prefs.set(strs[i],document.getElementById(strs[i]).value);
		}
	}

	function updatePrefsBlnEx(blns){
		var tempString;
		var tempSetting="";
		for (i=0;i<blns.length;i++){
			tempString = blns[i].split("///");

			if(document.getElementById(tempString[0]).checked==true){
				tempSetting += tempString[1];
			}
		}
		prefs.set('blnSetting',tempSetting);
	}



	function update() {
		updatePrefs(new Array('language','theme','baseurljs','baseurlcss','content','baseline','comment',
						'targetline','firstline','highlight','tabsize','shtitle','replacespecifier','replacewords','preprocessjsURL','splitword'));

		updatePrefsBlnEx(blnSettingValues.split(","));

		var shOption ="";

		if(document.getElementById('collapse').checked==true){
			shOption +=  " collapse: true;";
		}

		if(document.getElementById('gutter').checked==false){
			shOption +=  " gutter: false;";
		}

		if(prefs.getString('firstline').length>0){
			shOption +=  " first-line: " + prefs.getString('firstline') + ";";
		}

		if(prefs.getString('highlight').length>0){
			shOption +=  " highlight:[" + prefs.getString('highlight') + "];";
		}

		if(prefs.getString('tabsize').length>0){
			shOption +=  " tab-size: " + prefs.getString('tabsize') + ";";
		}

		prefs.set('languagelower', document.getElementById('language').value.toLowerCase());
		prefs.set('shOption',shOption);
	}


</script>

<table style="width: 100%;">
	<tr>
		<td>
			<input type="checkbox" id="multilanguage" onClick="update()">multilanguage
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="remotedata" onClick="update()">remotedata
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="remotereplacedata" onClick="update()">remotereplacedata
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="remotecomment" onClick="update()">remotecomment
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="simplereplace" onClick="update()">simplereplace
		</td>
	</tr>
	<tr>
		<td>
			<H3>Source Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td>
			<strong>BaseURL(js):</strong>
		</td>
		<td>
			<textarea id="baseurljs" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>BaseURL(css):</strong>
		</td>
		<td>
			<textarea id="baseurlcss" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>preprocess script URL:</strong>
		</td>
		<td>
			<textarea id="preprocessjsURL" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>BaseLine:(nn)</strong>
		</td>
		<td>
			<textarea id="baseline" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Comment:</strong>
		</td>
		<td>
			<textarea id="comment" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Target Line:(nn,nn-nn,or F)</strong>
		</td>
		<td>
			<textarea id="targetline" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>content:</strong>
		</td>
		<td>
			<textarea id="content" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>replacespecifier:</strong>
		</td>
		<td>
			<textarea id="replacespecifier" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>replacewords:</strong>
		</td>
		<td>
			<textarea id="replacewords" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Demiliter:</strong>
		</td>
		<td>
			<textarea id="splitword" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
</table>
<hr>
<table style="width: 100%;">
	<tr>
		<td>
			<H3>Language Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td><strong>Language</strong>
			</td>
		<td>
			<select id="language" onchange="update()" >
				<option value="Java" selected="true">Java</option>
				<option value="JavaFX" >JavaFX</option>
				<option value="Xml" >XML</option>
				<option value="JScript" >JavaScript</option>
				<option value="AppleScript" >AppleScript</option>
				<option value="AS3" >ActionScript3</option>
				<option value="Bash" >Bash/shell</option>
				<option value="CSharp" >C#</option>
				<option value="Cpp" >C++</option>
				<option value="ColdFusion" >ColdFusion</option>
				<option value="Css" >CSS</option>
				<option value="Delphi" >Delphi</option>
				<option value="Diff" >Diff</option>
				<option value="Erlang" >Erlang</option>
				<option value="Groovy" >Groovy</option>
				<option value="Perl" >Perl</option>
				<option value="Php" >PHP</option>
				<option value="Plain" >Plain Text</option>
				<option value="PowerShell" >PowerShell</option>
				<option value="Python" >Python</option>
				<option value="Ruby" >Ruby</option>
				<option value="Sass" >Sass</option>
				<option value="Scala" >Scala</option>
				<option value="Sql" >SQL</option>
				<option value="Vb" >Visual Basic</option>
				<option value="shBrushOther1" >Other1</option>
			</select>
		</td>
	</tr>
	<tr>
		<td><strong>Theme</strong>
		</td>
		<td>
			<select id="theme" onchange="update()">
				<option value="Default" selected="true">Default</option>
				<option value="Django" >Django</option>
				<option value="Eclipse" >Eclipse</option>
				<option value="Emacs" >Emacs</option>
				<option value="FadeToGrey" >FadeToGrey</option>
				<option value="Midnight" >Midnight</option>
				<option value="RDark" >RDark</option>
				<option value="Other1" >Other1</option>
			</select>
		</td>
	</tr>
</table>

<hr>
<table style="width: 100%;">
	<tr>
		<td>
			<H3>Output Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="dynamicheight" onClick="update()">dynamicheight
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="urlshow" onClick="update()">URL show
		</td>
	</tr>
</table>

<hr>
<table style="width: 100%;">
	<tr>
		<td>
			<H3>Syntax Highlighter Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="collapse" onClick="update()">collapse
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="gutter" onClick="update()">gutter
		</td>
	</tr>
</table>

<table style="width: 100%;">
	<tr>
		<td>
			<strong>firstline:</strong>
		</td>
		<td>
			<textarea id="firstline" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>highlight:</strong>
		</td>
		<td>
			<textarea id="highlight" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>tabsize:</strong>
		</td>
		<td>
			<textarea id="tabsize" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>shtitle:</strong>
		</td>
		<td>
			<textarea id="shtitle" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
</table>

<script type="text/javascript">
	gadgets.util.registerOnLoadHandler(init);
</script>
]]>
	</Content>
</Module>
