<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="SHGadget for Google Sites" author="elekingmole">
		<Require feature="setprefs" />
		<Require feature="dynamic-height" />
		<Require feature="opensocial-0.9" />
		<Preload href="__UP_targeturl__" />
	</ModulePrefs>

	<UserPref name="baseurljs" datatype="string"
		default_value="http://alexgorbatchev.com/pub/sh/current/scripts" />
	<UserPref name="baseurlcss" datatype="string"
		default_value="http://alexgorbatchev.com/pub/sh/current/styles" />
	<UserPref name="preprocessjsURL" datatype="string" />
	<UserPref name="language" datatype="string" />
	<UserPref name="languagelower" datatype="string" />
	<UserPref name="theme" datatype="string" />
	<UserPref name="targeturl" datatype="string" />
	<UserPref name="baseline" datatype="string" default_value="0" />
	<UserPref name="targetline" datatype="string" />
	<UserPref name="comment" datatype="string" />
	<UserPref name="css" datatype="string" />
	<UserPref name="urlshow" datatype="bool" default_value="false" />
	<UserPref name="dynamicheight" datatype="bool" default_value="false" />
	<UserPref name="firstline" datatype="string" />
	<UserPref name="highlight" datatype="string" />
	<UserPref name="tabsize" datatype="string" />
	<UserPref name="shtitle" datatype="string" />
	<UserPref name="shtitleValue" datatype="string" />
	<UserPref name="shOption" datatype="string" />
	<UserPref name="collapse" datatype="bool" default_value="false" />
	<UserPref name="gutter" datatype="bool" default_value="false" />
	<UserPref name="multilanguage" datatype="bool" default_value="false" />
	<UserPref name="ml_splitword" datatype="string" default_value="----[split]----" />
	<UserPref name="remotecomment" datatype="bool" default_value="false" />
	<UserPref name="shbrushxml" datatype="string" />

	<Content type="html"><![CDATA[

<link type="text/css" href="__UP_baseurlcss__/shCore.css" rel="stylesheet"/>
<link type="text/css" href="__UP_baseurlcss__/shTheme__UP_theme__.css" rel="stylesheet"/>
<script src="__UP_baseurljs__/shCore.js" type="text/javascript"></script>
<script src="__UP_baseurljs__/shAutoloader.js" type="text/javascript"></script>
<script src="__UP_baseurljs__/shBrushXml.js" type="text/javascript"></script>
<script src="__UP_preprocessjsURL__" type="text/javascript"></script>

<script type="text/javascript">
	var preprocessjsURL = "__UP_preprocessjsURL__";
	var splitString = "__UP_ml_splitword__";
	var prefs=new gadgets.Prefs();
    var lang= getLang();
	var targetlineArray = new Array();
	var strArray;
	var returnHtml="";
	
	function doHighlight(){
		var cssData = "__UP_css__";
		if(!(typeof cssData === "undefined")){
			returnHtml = htmlUnescape(cssData);
		}
				
		if(prefs.getBool("urlshow") == true){
			returnHtml +="<a href='__UP_targeturl__' target='_blank'>__UP_targeturl__</a>"+"\n\n";
		}
		returnHtml +="<pre id='code_pre'  class='brush:__UP_languagelower__;__UP_shOption__' __UP_shtitleValue__ >";
		
		getData();
	}

	function getData() {
		var params = {};
		params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
		var url= "__UP_targeturl__";
		gadgets.io.makeRequest(url, response, params);
	}

	function response(obj) {
		var str = gadgets.util.escapeString(obj.text);
		var commentbase = "__UP_comment__";
		var commentArray;
		var targetlineString = "__UP_targetline__";
		
		if(!(typeof preprocessjsURL === "undefined") && preprocessjsURL.length>0){
			str = doModify(str);
		}
		
		if(str.indexOf("&#13;&#10;") != -1){
			strArray = str.split("&#13;&#10;");
		}else{
			strArray = str.split("&#10;");
		}
				
		if(targetlineString.length>0){
			targetlineArray = getTargetline(targetlineString,strArray);
		}else{
			targetlineArray = getTargetline("0-",strArray);
		}
		
		if(!(typeof commentbase === "undefined") && commentbase.length>0){
			commentArray = getCommentData(commentbase);
		}else{
			commentArray = new Array();
		}	
		
		returnHtml+=processTargetlineData(targetlineArray,strArray,commentArray);
		closeHTML();
	}

	function getTargetData(targetData){
		var tempContent = targetData.split(splitString);
		var returnContent = tempContent[0].substring(3,tempContent[0].length);
		var diff = 0;
		
		for(i=0;i<tempContent.length;i++){
			for(var diff=0;diff<3;diff++){
				if(tempContent[i].substring(0+diff,2+diff) == lang ){
					returnContent = tempContent[i].substring(2+diff,tempContent[i].length);
					break;
				}
			}	
		}
		return returnContent;
	}

	function getCommentData(targetComment){
		var returnCommentArray = new Array();
		var tempArray = new Array();
		var tempContent;
		var returnContent = targetComment;
		var diff=0;
		        
		if(prefs.getBool("multilanguage") == true && targetComment.indexOf(splitString) != -1){
			targetComment = getTargetData(targetComment);
		}
		
		if(prefs.getBool("remotecomment") == true && targetComment.substring(0,4)=="http" ){
			getRemoteComment(targetComment.substring(0,targetComment.length));
			return;
		}else{
			if(targetComment.indexOf("-") != -1){
				if(targetComment.indexOf(",") != -1){
					tempArray = targetComment.split(",");
				}else{
					tempArray.push(targetComment);
				}
	
				for(c=0;c<tempArray.length;c++){
					if(tempArray[c].length > 0 ){
						returnCommentArray.push(parseComment(tempArray[c]));
					}
				}
			}
			return returnCommentArray;
		}
	}

	function getRemoteComment(contentURL) {
		var params = {};
		params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
		var url= contentURL;
		gadgets.io.makeRequest(url, commentresponse, params);
	}

	function commentresponse(obj){
		var remoteContentData = obj.text;	
		var tempRemoteContent;
		var commentbase;
		var diff=0;
		
		if(prefs.getBool("multilanguage") == true && remoteContentData.indexOf(splitString) != -1){
			commentbase=getTargetData(remoteContentData);
		}else{
        	commentbase=remoteContentData;
		}
		
		if(!(typeof commentbase === "undefined") && commentbase.length>0){
			commentArray = getCommentData(commentbase);
		}else{
			commentArray = new Array();
		}
		
		returnHtml+=processTargetlineData(targetlineArray,strArray,commentArray);
		closeHTML();
	}


	function parseComment(parseTargetComment){
		var tempArray;
		var tempCommentArray = new Array();
		
		if(parseTargetComment.indexOf("-") == -1){
			tempCommentArray.push(new Array(parseTargetComment.substring(1),parseTargetComment.substring(0,1)));
		}else{
			tempArray = parseTargetComment.split("-");
			tempCommentArray.push(new Array(tempArray[0].substring(1),tempArray[0].substring(0,1) + tempArray[1]));
		}
		return tempCommentArray;
	}

	function closeHTML(){
		returnHtml+="</pre>";
		document.getElementById('content_div').innerHTML += returnHtml;
		SyntaxHighlighter.autoloader('__UP_languagelower__                   __UP_baseurljs__/shBrush__UP_language__.js');
		SyntaxHighlighter.all();
		
		if(prefs.getBool("dynamicheight") == true){
			gadgets.window.adjustHeight();
		}
	}
	
	function htmlUnescape(str){
		str=str.replace(/&gt;/g,'>');
		str=str.replace(/&lt;/g,'<');
		str=str.replace(/&#62;/g,'>');
		str=str.replace(/&#60;/g,'<');
		str=str.replace(/&#34;/g,'"');
		str=str.replace(/&quot;/g,'"');
		str=str.replace(/&#39;/g,"'");
		
		return str;
	}
	
	function getTargetline(tempTargetlineString,tempStrArray){
		var tempTargetlineArray = new Array();
		var returnTargetlineArray = new Array();
		var lineMax = tempStrArray.length;
		
		if((tempTargetlineString.indexOf(",") != -1 )){
			tempTargetlineArray = tempTargetlineString.split(",");
		}else{
			if(tempTargetlineString.indexOf("F") != -1){
				var index;
					
				if(tempTargetlineString.length == 1){
					index= 0;
				}else{
					index = parseInt(tempTargetlineString.substring(1,tempTargetlineString.length));
				}
				
				if(tempStrArray[index].indexOf("L-I-N-E")!=-1){
					var targetlinefromSource = tempStrArray[index].split("L-I-N-E");
					if(targetlinefromSource[1].length>0){
						tempTargetlineArray = targetlinefromSource[1].split(",");
					}
				}else{
					window.alert("Line not designated ");
				}
			}else{
				tempTargetlineArray.push(tempTargetlineString);
			}
		}
		
		var tempUnfoldedArray;
		for(t= 0;t<= tempTargetlineArray.length;t++){
			tempUnfoldedArray = new Array();
			if(!(typeof tempTargetlineArray[t] === "undefined")){
				
				if(tempTargetlineArray[t].indexOf("-") != -1 ){
					var tempNumber = tempTargetlineArray[t].split("-");
				
					if(tempNumber[0].length>0 && tempNumber[1].length>0){
						if(matchNumber(tempNumber[0]) && matchNumber(tempNumber[1])){
							tempUnfoldedArray=unfoldTargetline(parseInt(tempNumber[0]),parseInt(tempNumber[1]));
						}
					}else if(tempNumber[0].length>0){
						if(matchNumber(tempNumber[0])){
							tempUnfoldedArray=unfoldTargetline(parseInt(tempNumber[0]),lineMax);
						}
					}else if(tempNumber[1].length>0){
						if(matchNumber(tempNumber[1])){
							tempUnfoldedArray=unfoldTargetline(0,parseInt(tempNumber[1]));
						}
					}
				}else{
					tempUnfoldedArray.push(tempTargetlineArray[t]);
				}
				
				for(x= 0;x<= tempUnfoldedArray.length;x++){
					if(!(typeof tempUnfoldedArray[x] === "undefined")){
						if(tempUnfoldedArray[x].indexOf(",") != -1){
							var tempSplitArray = tempUnfoldedArray[x].split(",");
					
							for(w= 0;w<= tempSplitArray.length;w++){
								if(!(typeof tempSplitArray[w] === "undefined")){
									returnTargetlineArray.push(tempSplitArray[w]);
								}
							}
						}else{
							returnTargetlineArray.push(tempUnfoldedArray[x]);
						}
					}		
				}
			}
		}
		return returnTargetlineArray;
	}

	function unfoldTargetline(startline,endline){
		var unfoldedTargetline ="";
		var comma=",";
		for (u= startline ;u<= endline;u++){
			unfoldedTargetline += u + comma;
			
			if(endline == u +1){
				comma ="";
			}
		}
		return unfoldedTargetline.split(",");
	}

	function matchNumber(targetString){
		if(targetString.match(/^[0-9]+/)){
			return true;
		}else{
			return false;
		}
	}

	function getLang(){
		return (navigator.userLanguage||navigator.browserLanguage||navigator.language).substr(0,2);
	}

	function processTargetlineData(targetlineArray,strArray,commentArray){
		var returnData="";
		var baseLine = __UP_baseline__;
		var index =0;
		var tempCommentArray = new Array();

		for (i=0;i<targetlineArray.length;i++){
			if(targetlineArray[i].match(/^[0-9]+/)){
				if(!(typeof strArray[parseInt(targetlineArray[i]) + baseLine] === "undefined")){
					if(commentArray.length>0 ){
						if(index < commentArray.length){
							tempCommentArray = commentArray[index][0];
							if(tempCommentArray[0].match(/^[0-9]+/) && parseInt(tempCommentArray[0]) == i){
								if(tempCommentArray[1].substring(0,1) == "S"){
									returnData+= tempCommentArray[1].substring(1,tempCommentArray[1].length)+ "\r\n";
									returnData+=strArray[parseInt(targetlineArray[i]) +baseLine];
									
									if(index+1 < commentArray.length){
										tempCommentArray = commentArray[index+1][0];
										if(tempCommentArray[0].match(/^[0-9]+/) && parseInt(tempCommentArray[0]) == i){
											if(tempCommentArray[1].substring(0,1) == "A"){
												returnData+=tempCommentArray[1].substring(1,tempCommentArray[1].length);
												index+=1;
											}else if(tempCommentArray[1].substring(0,1) == "N"){
												returnData+="\r\n";
												index+=1;
											}
										}
									}
									
									returnData+="\r\n";
								}else if(tempCommentArray[1].substring(0,1) == "A"){
									returnData+=strArray[parseInt(targetlineArray[i]) +baseLine] +
										tempCommentArray[1].substring(1,tempCommentArray[1].length) + "\r\n";
								}else if(tempCommentArray[1].substring(0,1) == "N"){
									returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+"\r\n\r\n";
								}else{
									returnData+= "\r\n";
								}
				
								index +=1;	
											
							}else{
								returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+ "\r\n";
							}
						}else{
							returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+ "\r\n";	
						}
					}else{
						returnData+=strArray[parseInt(targetlineArray[i]) +baseLine]+ "\r\n";					
					}
				}
					
			}else if(targetlineArray[i].substring(0,1) =="S" && targetlineArray[i].length>1){
				returnData+= targetlineArray[i].substring(1,targetlineArray[i].length) + "\r\n";
			}else if(targetlineArray[i].substring(0,1) =="A" && targetlineArray[i].length>1){
				returnData= returnData.substring(0,returnData.length-1)+
					targetlineArray[i].substring(1,targetlineArray[i].length) + "\r\n";
			}else if(targetlineArray[i].substring(0,1) =="N"){
				returnData+= "\r\n";
			}
		}
		return returnData;
	}

	gadgets.util.registerOnLoadHandler(doHighlight);
</script>
<div id="content_div"></div>
]]>
	</Content>

	<Content type="html" view="configuration" preferred_height="400">
<![CDATA[
<script type="text/javascript">
	var prefs=new gadgets.Prefs();

	function init() {
	
		initStringValue(new Array('baseurljs','baseurlcss','targeturl','targetline','baseline','comment','css',
		'firstline','highlight','tabsize','shtitle','language','theme','ml_splitword',"preprocessjsURL"));
	
		initBoolValue(new Array('dynamicheight','urlshow','collapse','gutter','multilanguage','remotecomment'));
	
		update();
	}

	function initBoolValue(blns){
		for (i=0;i<blns.length;i++){
			var targetboolean=prefs.getBool(blns[i]);
			if(targetboolean ==true){
				document.getElementById(blns[i]).checked=true;
			}else{
				document.getElementById(blns[i]).checked=false;
			}
		}
	}

	function initStringValue(strs){
		for (i=0;i<strs.length;i++){
			var targetvalue=prefs.getString(strs[i]);
			if (targetvalue.length>0){
				document.getElementById(strs[i]).value=gadgets.util.unescapeString(targetvalue);
			}
		}
	}

	function updatePrefs(strs){
		for (i=0;i<strs.length;i++){
			prefs.set(strs[i],document.getElementById(strs[i]).value);
		}
	}

	function updatePrefsBln(blns){
		for (i=0;i<blns.length;i++){
			if(document.getElementById(blns[i]).checked==true){
				prefs.set(blns[i],true);
			}else{
				prefs.set(blns[i],false);
			}
		}
	}

	function update() {
		updatePrefs(new Array('language','theme','baseurljs','baseurlcss','targeturl','baseline','comment','css',
						'targetline','firstline','highlight','tabsize','shtitle','ml_splitword','preprocessjsURL'));
		
		updatePrefsBln(new Array('dynamicheight','urlshow','collapse','gutter','multilanguage','remotecomment'));

		var shOption ="";
	
		if(document.getElementById('collapse').checked==true){
			shOption +=  " collapse: true;";
		}
	
		if(document.getElementById('gutter').checked==false){
			shOption +=  " gutter: false;";
		}
	
		if(prefs.getString('firstline').length>0){
			shOption +=  " first-line: " + prefs.getString('firstline') + ";";
		}
	
		if(prefs.getString('highlight').length>0){
			shOption +=  " highlight:[" + prefs.getString('highlight') + "];";
		}

		if(prefs.getString('tabsize').length>0){
			shOption +=  " tab-size: " + prefs.getString('tabsize') + ";";
		}

		if(prefs.getString('shtitle').length>0){
			prefs.set('shtitleValue', 'title="'+ prefs.getString('shtitle') +'"' );
		}else{
			prefs.set('shtitleValue',"");
		}

		prefs.set('languagelower', document.getElementById('language').value.toLowerCase());	
		prefs.set('shOption',shOption);
	}
	
	
</script>

<table style="width: 100%;">
	<tr>
		<td>
			<H3>Source Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td>
			<strong>BaseURL(js):</strong>
		</td>
		<td>
			<textarea id="baseurljs" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>BaseURL(css):</strong>
		</td>
		<td>
			<textarea id="baseurlcss" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>preprocess script URL:</strong>
		</td>
		<td>
			<textarea id="preprocessjsURL" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>	
	<tr>
		<td>
			<strong>BaseLine:(nn)</strong>
		</td>
		<td>
			<textarea id="baseline" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Commnet:</strong>
		</td>
		<td>
			<textarea id="comment" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>css:</strong>
		</td>
		<td>
			<textarea id="css" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Target Line:(nn,nn-nn,or F)</strong>
		</td>
		<td>
			<textarea id="targetline" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Target URL:</strong>
		</td>
		<td>
			<textarea id="targeturl" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>Demiliter:</strong>
		</td>
		<td>
			<textarea id="ml_splitword" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="multilanguage" onClick="update()">multilanguage
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="remotecomment" onClick="update()">remotecomment
		</td>
	</tr>
</table>
<hr>
<table style="width: 100%;">
	<tr>
		<td>
			<H3>Language Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td><strong>Language</strong>
			</td>
		<td>
			<select id="language" onchange="update()" >
				<option value="Java" selected="true">Java</option>
				<option value="JavaFX" >JavaFX</option>
				<option value="Xml" >XML</option>
				<option value="JScript" >JavaScript</option>
				<option value="AppleScript" >AppleScript</option>
				<option value="AS3" >ActionScript3</option>
				<option value="Bash" >Bash/shell</option>
				<option value="CSharp" >C#</option>
				<option value="Cpp" >C++</option>
				<option value="ColdFusion" >ColdFusion</option>
				<option value="Css" >CSS</option>
				<option value="Delphi" >Delphi</option>
				<option value="Diff" >Diff</option>
				<option value="Erlang" >Erlang</option>
				<option value="Groovy" >Groovy</option>
				<option value="Perl" >Perl</option>
				<option value="Php" >PHP</option>
				<option value="Plain" >Plain Text</option>
				<option value="PowerShell" >PowerShell</option>
				<option value="Python" >Python</option>
				<option value="Ruby" >Ruby</option>
				<option value="Sass" >Sass</option>
				<option value="Scala" >Scala</option>
				<option value="Sql" >SQL</option>
				<option value="Vb" >Visual Basic</option>
				<option value="shBrushOther1" >Other1</option>
			</select>
		</td>
	</tr>
	<tr>
		<td><strong>Theme</strong>
		</td>
		<td>
			<select id="theme" onchange="update()">
				<option value="Default" selected="true">Default</option>
				<option value="Django" >Django</option>
				<option value="Eclipse" >Eclipse</option>
				<option value="Emacs" >Emacs</option>
				<option value="FadeToGrey" >FadeToGrey</option>
				<option value="Midnight" >Midnight</option>
				<option value="RDark" >RDark</option>
				<option value="Other1" >Other1</option>
			</select>
		</td>
	</tr>
</table>

<hr>
<table style="width: 100%;">
	<tr>
		<td>
			<H3>Output Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="dynamicheight" onClick="update()">dynamicheight
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="urlshow" onClick="update()">URL show
		</td>
	</tr>
</table>

<hr>
<table style="width: 100%;">
	<tr>
		<td>
			<H3>Syntax Highlighter Setting</H3>
		</td>
		<td>
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="collapse" onClick="update()">collapse
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="gutter" onClick="update()">gutter
		</td>
	</tr>
</table>

<table style="width: 100%;">
	<tr>
		<td>
			<strong>firstline:</strong>
		</td>
		<td>
			<textarea id="firstline" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>highlight:</strong>
		</td>
		<td>
			<textarea id="highlight" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>tabsize:</strong>
		</td>
		<td>
			<textarea id="tabsize" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>shtitle:</strong>
		</td>
		<td>
			<textarea id="shtitle" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
</table>

<script type="text/javascript">
	gadgets.util.registerOnLoadHandler(init);
</script>
]]>
	</Content>
</Module>