<?xml version="1.0" encoding="UTF-8" ?>
<Module>
	<ModulePrefs title="Multi Language Widget" author="elekingmole">
		<Require feature="setprefs" />
		<Require feature="dynamic-height" />
		<Require feature="opensocial-0.9" />
	</ModulePrefs>

	<UserPref name="content" datatype="string" />
	<UserPref name="css" datatype="string" />
	<UserPref name="preprocessjsURL" datatype="string" />
	<UserPref name="splitword" datatype="string" default_value="----[split]----" />

	<UserPref name="replaceSpecifier" datatype="string" default_value="%--%" />
	<UserPref name="replaceWords" datatype="string" />

	<UserPref name="multilanguage" datatype="bool" default_value="false" />
	<UserPref name="remotedata" datatype="bool" default_value="false" />
	<UserPref name="remotereplacedata" datatype="bool" default_value="false" />
	<UserPref name="simplereplace" datatype="bool" default_value="false" />
	<UserPref name="dynamicheight" datatype="bool" default_value="false" />
	<UserPref name="htmlescape" datatype="bool" default_value="false" />

	<Content type="html"><![CDATA[
<script src="__UP_preprocessjsURL__" type="text/javascript"></script>

<script type="text/javascript">
	var contentData="__UP_content__";
	var cssData = "__UP_css__";
	var preprocessjsURL = "__UP_preprocessjsURL__";
	var replaceData="__UP_replaceWords__";
	var splitString = "__UP_splitword__";
	var lang = getLang();
	var prefs=new gadgets.Prefs();
	var returnHtml="";
	var boolml = getBln("multilanguage");
	var boolhe = getBln("htmlescape");

	function doDisplay(){
		if(to(cssData)){
			cssData=getTargetLangData(cssData);
			doGetRemoteData(cssData,getCssData);
		}
		setupData();
	}

	function getCssData(obj){
		cssData=getTargetLangData(obj.text);
		setupData();
	}

	function setupData(){
		if(to(cssData)){
			returnHtml += htmlUnescape(cssData);
		}
		contentData=getTargetLangData(contentData);
		doFork("remotedata",contentData,getContentData,setupReplaceData);
	}

	function getContentData(obj){
		contentData=getTargetLangData(obj.text);
		setupReplaceData();
	}

	function setupReplaceData(){
		replaceData=getTargetLangData(replaceData);
		doFork("remotereplacedata",replaceData,getReplaceData,doProcessData);
	}

	function getReplaceData(obj){
		replaceData = getTargetLangData(obj.text);
		doProcessData();
	}

	function doProcessData(){
		returnHtml += changeData();
		closeHTML();
	}

	function changeData(){
		if(to(contentData)){
			if(to(preprocessjsURL)){
				contentData = doModify(contentData);
			}

			if(to(replaceData)){
				contentData = doReplaceWords();
			}

			return contentData;
		}
	}

	function doReplaceWords(){
		var specifier =  "__UP_replaceSpecifier__";
		var tempWords = "";
		var replaceWords = "";
		var tempTargetWord;
		var tempReplaceWord;
		var prefix=specifier.substring(0,specifier.length/2);
		var suffix=specifier.substring(specifier.length/2,specifier.length);;
		var regexp;

		if(replaceData.indexOf(specifier+specifier) != -1){
			tempWords = replaceData.split(specifier+specifier);

			if(tempWords[1].length>0){
				if(tempWords[1].indexOf(specifier) != -1){
					replaceWords = tempWords[1].split(specifier);
				}else{
					replaceWords = tempWords[1];
				}

				for(i=0;i<replaceWords.length;i++){

					if(replaceWords[i].indexOf("=") != -1){
						tempTargetWord=replaceWords[i].split("=");
						tempReplaceWord=replaceWords[i].substring(replaceWords[i].indexOf("=")+1,replaceWords[i].length);
						if(getBln("simplereplace")){
							regexp= new RegExp(tempTargetWord[0],"g");
						}else{
							regexp= new RegExp(prefix+tempTargetWord[0]+suffix,"g");
						}

						contentData=contentData.replace(regexp,tempReplaceWord);
					}
				}
			}
		}

		return contentData;
	}

	function doGetRemoteData(targetData,async){
		if(targetData.substring(0,4)=="http"){
			getRemoteData(targetData.substring(0,targetData.length),async);
			return;
		}else if(targetData.substring(1,4)=="htt"){
			getRemoteData(targetData.substring(1,targetData.length),async);
			return;
		}
	}

	function doFork(targetBln,targetData,async,defaultMethod){
		if(getBln(targetBln)){
			doGetRemoteData(targetData,async);
		}

		defaultMethod();
		return;
	}

	function to(object){
		if(!(typeof object === "undefined") && object.length>0){
			return true;
		}else{
			return false;
		}
	}

	function getBln(prefsname){
		if(prefs.getBool(prefsname) == true){
			return true;
		}else{
			return false;
		}
	}

	function closeHTML(){

		if(!(getBln("htmlescape"))){
			returnHtml = gadgets.util.unescapeString(returnHtml);
		}

		document.getElementById('content_div').innerHTML += returnHtml;

		if(getBln("dynamicheight")){
			gadgets.window.adjustHeight();
		}
	}

	function htmlUnescape(str){
		str=str.replace(/&gt;/g,'>');
		str=str.replace(/&lt;/g,'<');
		str=str.replace(/&#62;/g,'>');
		str=str.replace(/&#60;/g,'<');
		str=str.replace(/&#34;/g,'"');
		str=str.replace(/&quot;/g,'"');
		str=str.replace(/&#39;/g,"'");

		return str;
	}

	function getTargetLangData(sourceData){
		if(to(sourceData)){
			if(boolml && sourceData.indexOf(splitString) != -1){
				sourceData = getTargetData(sourceData);
			}
		}

		return sourceData;
	}

	function getTargetData(targetData){
		var tempContent = targetData.split(splitString);
		var returnContent = tempContent[0].substring(3,tempContent[0].length);
		var diff = 0;

		for(i=0;i<tempContent.length;i++){
			for(var diff=0;diff<3;diff++){
				
				if(tempContent[i].substring(0+diff,2+diff) == lang ){
					returnContent = tempContent[i].substring(2+diff,tempContent[i].length);
					break;
				}
			}
		}
		return returnContent;
	}

	function getRemoteData(contentURL,handler) {
		var params = {};

		params[gadgets.io.RequestParameters.CONTENT_TYPE] = gadgets.io.ContentType.TEXT;
		var url= contentURL;
		gadgets.io.makeRequest(url, handler, params);
	}
	
	function getLang(){
		return (navigator.userLanguage||navigator.browserLanguage||navigator.language).substr(0,2);
	}

	gadgets.util.registerOnLoadHandler(doDisplay);
</script>
<div id="content_div"></div>
]]>
	</Content>

	<Content type="html" view="configuration" preferred_height="400">
<![CDATA[
<script type="text/javascript">
	var prefs=new gadgets.Prefs();

	function init() {
		initStringValue(new Array('content','css','splitword','preprocessjsURL','replaceSpecifier','replaceWords'));
		initBoolValue(new Array('dynamicheight','multilanguage','remotedata','remotereplacedata','simplereplace','htmlescape'));
		update();
	}

	function initStringValue(strs){
		for (i=0;i<strs.length;i++){
			var targetvalue=prefs.getString(strs[i]);
			if (targetvalue.length>0){
				document.getElementById(strs[i]).value=htmlUnescape(nlUnescape(targetvalue));
			}
		}
	}

	function htmlUnescape(str){
		str=str.replace(/&gt;/g,'>');
		str=str.replace(/&lt;/g,'<');
		str=str.replace(/&#62;/g,'>');
		str=str.replace(/&#60;/g,'<');
		str=str.replace(/&#34;/g,'"');
		str=str.replace(/&quot;/g,'"');
		str=str.replace(/&#39;/g,"'");

		return str;
	}

	function nlUnescape(str){
		str=str.replace(/&#10;/g,'\r\n');
		return str;
	}

	function updatePrefs(strs){
		for (i=0;i<strs.length;i++){
			prefs.set(strs[i],document.getElementById(strs[i]).value);
		}
	}

	function initBoolValue(blns){
		for (i=0;i<blns.length;i++){
			var targetboolean=prefs.getBool(blns[i]);

			if(targetboolean ==true){
				document.getElementById(blns[i]).checked=true;
			}else{
				document.getElementById(blns[i]).checked=false;
			}
		}
	}


	function updatePrefsBln(blns){
		for (i=0;i<blns.length;i++){
			if(document.getElementById(blns[i]).checked==true){
				prefs.set(blns[i],true);
			}else{
				prefs.set(blns[i],false);
			}
		}
	}


	function update() {
		updatePrefs(new Array('content','css','splitword','preprocessjsURL','replaceSpecifier','replaceWords'));
		updatePrefsBln(new Array('dynamicheight','multilanguage','remotedata','remotereplacedata','simplereplace','htmlescape'));
	}
</script>

<table style="width: 100%;">
	<tr>
		<td>
			<input type="checkbox" id="dynamicheight" onClick="update()">dynamicheight
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="htmlescape" onClick="update()">htmlescape
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="multilanguage" onClick="update()">multilanguage
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="remotedata" onClick="update()">remotedata
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="remotereplacedata" onClick="update()">remotereplacedata
		</td>
	</tr>
	<tr>
		<td>
			<input type="checkbox" id="simplereplace" onClick="update()">simplereplace
		</td>
	</tr>
	<tr>
		<td>
			<strong>splitword:</strong>
		</td>
		<td>
			<textarea id="splitword" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>replaceSpecifier:</strong>
		</td>
		<td>
			<textarea id="replaceSpecifier" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>replaceWords:</strong>
		</td>
		<td>
			<textarea id="replaceWords" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>

	<tr>
		<td>
			<strong>content:</strong>
		</td>
		<td>
			<textarea id="content" style="width: 100%; height: 400px" onchange="update()"></textarea>
		</td>
	</tr>

	<tr>
		<td>
			<strong>css:</strong>
		</td>
		<td>
			<textarea id="css" style="width: 100%; height: 400px" onchange="update()"></textarea>
		</td>
	</tr>
	<tr>
		<td>
			<strong>preprocess script URL:</strong>
		</td>
		<td>
			<textarea id="preprocessjsURL" style="width: 100%;" onchange="update()"></textarea>
		</td>
	</tr>

</table>


<script type="text/javascript">
	gadgets.util.registerOnLoadHandler(init);
</script>
]]>
	</Content>
</Module>
